<?php

// Asterisk for wildcard 
define('CONFIGURATION_VARIABLES_WILDCARD','*');

// Wildcard ONLY works on the end of the string.
define('CONFIGURATION_VARIABLES_IGNORED', 'cron_*,configuration_*,install_*,file_*,update_*,admin_menu_*,drupal_*,remote_server,clean_url,comment_page,menu_expanded,node_submitted_page,path_alias_whitelist,css_js_query_string');


/**
 * Implements hook_configuration_api().
 */
function configuration_variables_configuration_api() {
  return array(
    'configuration_variables' => array(
      'name' => t('System Variables'),
      'feature_source' => TRUE,
      'default_hook' => 'configuration_variables_configuration_export_options',
      'default_file' => CONFIGURATION_DEFAULTS_CUSTOM,
      'default_filename' => 'configuration.variables',
    ),
  );
}

/**
 * Efficient method for accurately testing the start of a string
 * @param string $str
 * @param string $sub
 * @return boolean 
 */
function configuration_variables_begins_with($str, $sub) {
    return (strncmp($str, $sub, strlen($sub)) === 0);
}

/**
 * Efficient method for accurately testing the end of a string
 * @param string $str
 * @param string $sub
 * @return boolean 
 */
function configuration_variables_ends_with($str, $sub) {
    if (strlen($sub) > strlen($sub)) 
      return false;
    return substr_compare($str, $sub, -strlen($sub)) === 0;
}

/**
 * Implements hook_configuration_export_options().
 */
function configuration_variables_configuration_export_options() {
  $options = array();
  $ignore_list = explode(',',CONFIGURATION_VARIABLES_IGNORED);
  $result = db_query("SELECT * FROM {variable} ORDER BY name", array(), array('fetch' => PDO::FETCH_ASSOC));
  foreach ($result as $variable) {
    $save_variable = true;
    foreach ($ignore_list as $ignore_type) {
      // IS Ignore Type a Wildcard? Does it end with a *
      if (configuration_variables_ends_with($ignore_type, CONFIGURATION_VARIABLES_WILDCARD))
      {
        $wildcard_string = stristr($ignore_type, CONFIGURATION_VARIABLES_WILDCARD, $before_needle=true);
        // Does it match the beginning, then drop it out
        if (configuration_variables_begins_with($variable['name'],$wildcard_string)) 
          $save_variable = false;
      } else {
        // Does it match exactly, then drop it out
        if ($variable['name']===$ignore_type)
          $save_variable = false;
      }
    } // End Ignore Loop
    if ($save_variable)
      $options[$variable['name']] = $variable['name'];
  } // End Variable Loop
  return $options;
}

/**
 * implements configuration_variables_configuration_export_options
 * its really a hack for external components to work with configuration 
 * should return what we are tracking
 * @return type 
 */
function configuration_configuration_variables_configuration_export_options() {
  $variables_code = array();
  if (file_exists("config://configuration.variables.inc")) {
    // Load the current configuration file on disk
    include_once "config://configuration.variables.inc";
    //watchdog('configuration_variables', 'file_exists : '. (int)file_exists("config://configuration.variables.inc"));
    if (function_exists('configuration_configuration_variables_default_values')) {
      
      $variables_code = configuration_configuration_variables_default_values();
      //watchdog('configuration_variables', 'function_exists : '. serialize($variables_code));
    }
  }
  return $variables_code;
}
/***
 * Implements hook_configuration_export().
 * @param array data
 * @param arry export
 * @param string module_name
 * @return array 
 */
function configuration_variables_configuration_export($data, &$export, $module_name = 'configuration_variables') {
  $pipe = array();
  $map = configuration_get_default_map('configuration_variables');
  foreach ($data as $name) {
    if ($name)
    {
      // Otherwise, export the style
      $value = variable_get($name);
      if ($value) {
        $export['configuration']['configuration_variables'][$name] = $name;
      }
    }
  }
  return $pipe;
}

/**
 * Implements hook_configuration_export_render().
 */
function configuration_variables_configuration_export_render($module_name, $data, $export = NULL) {
  $code = array();
  //$code[] = '  global $variables;';
  $code[] = '  $variables = array();';
  $code[] = '';
  foreach ($data as $name) {
    if ($name) {
      $value = variable_get($name,'');
      //if ($value) {
        $code[] = "  // Exported variable: {$name}";
        
        $code[] = "  \$variables['{$name}'] = " . configuration_var_export($value, '  ', FALSE) . ";";
        //$code[] = "  \$variables['{$name}'] = '{$data}';";
        $code[] = "";
     // }
    }
  }
  $code[] = '  return $variables;';
  $code = implode("\n", $code);
  return array('configuration_variables_default_values' => $code);
}

/**
 * Implements hook_configuration_revert().
 */
function configuration_variables_configuration_revert($identifiers, $module_name = 'configuration') {
  //watchdog('configuration_variables', '$identifiers : '. serialize($identifiers));
  
  $default_variables = configuration_get_default('configuration_variables', $module_name);
  //watchdog('configuration_variables', '$default_variables : '. serialize($default_variables));
  if ($default_variables) {
    foreach ($default_variables as $name => $value) {
      //watchdog('configuration_variables', 'configuration_revert : '. $name . ' | ' . $value);
      if (in_array($name, $identifiers) || $identifiers[0] == '#import_all') {
        variable_set($name,$value);
      }
    }
    configuration_check_configurations(true);
    return true;
  }
  return false;
}

/**
 * There are no hooks available in Drupal 7 but in drupal  8 hook_variable_set will be used to trigger this function
 * @param string identifier
 */
function configuration_check_configuration_variables($identifier) {
  // Get static variable that we can access across this request.
  $from_activestore = &drupal_static('configuration_from_activestore');
  //watchdog('configuration_variables', 'from_activestore : '. $from_activestore);
  
  //watchdog('configuration_variables', 'file_exists : '. (int)file_exists("config://configuration.variables.inc"));
  if (file_exists("config://configuration.variables.inc")) {
    // Load the current configuration file on disk
    include_once "config://configuration.variables.inc";
    //watchdog('configuration_variables', 'file_exists : '. (int)file_exists("config://configuration.variables.inc"));
    if (function_exists('configuration_configuration_variables_default_values')) {
      // Clear all caches and flush.
      // NOt sure if I should empty the vars here

      // Export just the field we're tracking.
      module_load_include('inc', 'configuration', 'configuration.export');

      // Export the field we just saved and evaluate the export to $fields
      eval(array_pop(configuration_variables_configuration_export_render('configuration_variables', array($identifier))));

      $variables_code = configuration_configuration_variables_default_values();
      
      // If the activestore doesn't exist it is most likely because this configuration
      // only exists in code.
      if (empty($variables)) {
        configuration_set_status($component, $identifier, CONFIGURATION_TRACKED_DATASTORE_ONLY);
      }
      // If this was the previous configuration in activestore don't mark this as changed.
      $config = configuration_get_configuration();
      /**
       * @todo This code is reused in all component files.
       */
      $return = '';
      $component = 'configuration_variables';
      $status = $config[$component][$identifier]['status'];
      $md5_datastore = (is_array($variables_code) && array_key_exists($identifier, $variables_code)) ? md5(serialize($variables_code[$identifier])) : '';
      $md5_activestore = md5(serialize($variables[$identifier]));
      
      // Configs in code are not the same as what was just saved in activestore.
      if ($from_activestore == TRUE && $md5_datastore != $md5_activestore) {
        $status = $status | CONFIGURATION_ACTIVESTORE_OVERRIDDEN;
        configuration_set_status($component, $identifier, $status);
      }
      // Menu in the activestore is the same as what is in code.
      if ($md5_activestore == $md5_datastore) {
        $status = CONFIGURATION_IN_SYNC;
        configuration_set_status($component, $identifier, $status);
        configuration_set_hash($component, $identifier, $md5_activestore);
      }
      if ($md5_activestore != $md5_datastore) {
        $status = $status | CONFIGURATION_DATASTORE_OVERRIDDEN;
        configuration_set_status($component, $identifier, $status);
      }
      // When checking for new configurations, check to see if configurations are
      // the same in datastore as last activestore. Remove the datastore overridden.
      if ($md5_datastore == $config[$component][$identifier]['hash']) {
        $status = $status & ~CONFIGURATION_DATASTORE_OVERRIDDEN;
        configuration_set_status($component, $identifier, $status);
      }

      // Store the config array in cache for easy access
      if ($status != CONFIGURATION_IN_SYNC) {
        $configuration[$component][$identifier]['activestore'] = $variables[$identifier];
        $configuration[$component][$identifier]['datastore'] = (is_array($variables_code) && array_key_exists($identifier, $variables_code)) ? $variables_code[$identifier] : '';
        cache_set("$component:$identifier", $configuration, 'cache_configuration');
      }
    }
  }
}

/**
 * 
 * @param string identifier
 * @return string 
 */
function configuration_hash_configuration_variables($identifier) {
  // Export just the field we're tracking.
  
  module_load_include('inc', 'configuration', 'configuration.export');

  $data = configuration_variables_configuration_export_options();
  
  // Export the field we just saved and evaluate the export to hash
  eval(array_pop(configuration_variables_configuration_export_render('configuration_variables', array($identifier))));

  return md5(serialize($variables[$identifier]));
}

/**
 * Implements hook_variable_set()
 * Drupal 7 requires patch:
 * http://drupal.org/files/issues/hook_variables_1035940.patch 
 * @param string name
 * @param string value
 * @param string old_value 
 */
function configuration_variable_set($name, $value, $old_value = NULL) {
  
  // Drop out for non-deltas and I am NOT type'ing this -- Woody
  if ($value!=$old_value)
  {
    // Set a static variable that we can access across this request.

    module_load_include('inc', 'configuration', "configuration.export");

    // Set a static variable that we can access across this request.
    $a = &drupal_static('configuration_from_activestore');
    $a = true;
    
    configuration_check_configuration_variables($name);
    
    configuration_write_export_file();

    //watchdog('configuration_variables', 'HOOK '. $name);

    // @todo: Think about how I can handle this better.  Do I really want to
    // rebuild cache everytime I make a change?
    cache_clear_all('config_export', 'cache');
    // Prime the cache.
    $configs = configuration_get_configuration();
  }
}